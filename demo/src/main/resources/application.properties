# / localhost
#DB_HOST=localhost
#DB_PORT=5432
#spring.datasource.url=jdbc:postgresql://${DB_HOST}:${DB_PORT}/demo
#spring.datasource.username=postgres
#spring.datasource.password=f57a5ae3756947e8afebe759ebb2b25e

# Looks like we don't use it during testing...
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:~/liquibase;DB_CLOSE_ON_EXIT=FALSE
#spring.datasource.username=sa
#spring.datasource.password=

spring.liquibase.change-log=classpath:config/liquibase/db.changelog-master.xml

# create-drop / validate (production!)
spring.jpa.hibernate.ddl-auto=validate

server.port=8080

# TODO clean!?
# Ignore proxies when serializing entities
#spring.jackson.serialization.fail-on-empty-beans=false

spring.profiles.active=@activatedProperties@

spring.jpa.open-in-view=false

# spring.jpa.hibernate.jdbc.batch_versioned_data=true
# spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

spring.security.oauth2.client.registration.okta.client-id=7847056ee5444894d87c
spring.security.oauth2.client.registration.okta.client-secret=eed7f28ee080fa9e50d0f7dd237c199b32c67dd1
spring.security.oauth2.client.registration.okta.redirect-uri=http://localhost:8080/login/oauth2/code/github

spring.security.oauth2.client.provider.okta.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.okta.accessTokenUri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.okta.tokenUri=https://github.com/login/oauth/access_token

